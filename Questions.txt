Q) Which are legal:

A) class X {
     var x = 99;
   }

B) void doStuff(var x) { }

C) void doStuff() {
     var x;
     x = 100;
   }

D) void doStuff() {
     var x = 100;
   }

E) void doStuff() {
     var x = null;
   }

Q) Which are legal:

A) for (var x = 0; x < 3; x++)
    System.out.println(x);

B) try (var in = new FileReader("");
        var out = new FileWriter("")) {
   }

C) try (FileReader in = new FileReader("")) {
   } catch (var ex) { }

D) void doStuff() {
     var x = new int[]{ 1, 2, 3 };
   }

E) void doStuff() {
     var x = { 1, 2, 3 };
   }

Q) Given:
var x = true ? "99" : 99;

What is the type of x?
A) none, it's fails to compile
B) int
C) String
D) Object
E) none of the above

Q) Given:

     public static void main(String[] args) {
       final StringBuilder sb = new StringBuilder("Hello");
       sb.append(" world!");
       System.out.println(sb);
     }

   What is the result?
   A) Compilation fails
   B) Hello
   C) Hello world!
   D) Exception at runtime

Q) Given:

String message = """Hello\
Java 17 World!""";
System.out.println(message + "XXX");

What is the result?
A) Compilation fails
B) Exception at runtime
C) Hello
   Java 17 World!XXX
D) Hello Java 17 World!XXX
E) Hello Java 17 World!
   XXX

Q) Given:
    String message = """
        Hello
            Java 17 World!""";
    System.out.println(message + "XXX");

What is the result?
A)
Hello
Java 17 World!XXX
B)
Hello
    Java 17 World!XXX
C)
Hello
Java 17 World!
XXX
D)
    Hello
        Java 17 World!
XXX

Q)
int i = 3, j = 12, k = 2;
System.out.println(i + j / k - i);

What is the result?
A) -15
B) 4
C) 6
D) -9

Q)
int x = 10;
System.out.println("value is " + (x++ = 99));

What is the result?
A) 10
B) 11
C) 99
D) 109
E) Compilation fails

Q) Given:
    int j = 0;
    for (int i = 0; i < 3; i++) {
      if (i > ++j && i % 2 == 0) ++i = ++j;
      if (j > i + 2) continue;
      ++j;
      System.out.println(i + ", " + j);
    }

What is the result?
A) 0, 2
   1, 4
B) 0, 2
C) 1, 4
D) The program runs forever
E) Compilation fails

Q) Given:
     public static boolean getValue() {
       System.out.println("Getting value");
       return true;
     }

and:
       boolean b1 = false;
       System.out.println(b1 & getValue());

What is the result:
A) Compilation fails
B) false
C) true
D) Getting value
   false
E) Getting value
   true

Q) Given:

  int x = -1;
  System.out.println(x & 5);

What is the result?
A) Compilation fails
B) Exception at runtime
C) -1
D) 0x00000005
E) 5

Q) Which print "true"
A) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s == t);

B) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s.equals(t));

C) StringBuilder s = new StringBuilder("Hello");
   StringBuilder t = new StringBuilder("He");
   t.append("llo");
   sout(s.equals(t));

D) List<String> ls = List.of("Fred", "Jim");
   List<String> ls2 = new ArrayList<>(ls);
   sout(ls.equals(ls2));

E) LocalDate ld = LocalDate.of(2021, 3, 29);
   LocalDate ld2 = LocalDate.of(2021, 3, 29);
   sout(ld.equals(ld2));

Q) Which are true?

     String s1 = "Hello";
     String s2 = new StringBuilder("Hello").toString();
     String s3 = s2.intern();

and, in another jarfile:
class X {
  static String h = "Hel" + "lo";
}

A) s1 == s2
B) s2 == s3
C) s1 == s3
D) X.h == s1
E) None of the above

Q)   Given
class Thing {
  int x = 99;

  static void showIt() {
    int x = 98;
    System.out.println("x is " + x);
  }
}

What is the effect of:

Thing.showIt();

A) Compilation fails
B) Exception
C) 99
D) 98

Q) Given:
     class Base {
       void doBaseStuff() { System.out.println("doBaseStuff"); }
     }
and:
     class Sub extends Base {
       void doBaseStuff() { System.out.println("doSubStuff"); }
       void doOtherStuff() { System.out.println("doOtherStuff"); }
     }
and:
       Base b = new Sub();
       ((Runnable) b).run();

What is the result?
A) doSubStuff
B) doOtherStuff
C) doBaseStuff
D) Exception at runtime
E) Compilation failure

Q) Given:
    Object obj = "Hello";
    boolean answered = false;
    if (obj instanceof String) {
      String str = (String)obj;
      if (str.length() > 3) {
        System.out.println(str);
        answered = true;
      }
    }
    if (!answered) System.out.println("Nope");

Which replace the if clause to produce the same output?
A)    System.out.println(obj instanceof String str && str.length() > 3 ? str : "Nope");
B)    if (obj instanceof String str when str.length() > 3) System.out.println(str);
      else System.out.println("Nope");
C)    if (obj instanceof String str if str.length() > 3) System.out.println(str);
      else System.out.println("Nope");
D)    System.out.println(obj instanceof String.class str && str.length() > 3 ? str : "Nope");
E)    if (!(obj instanceof String str) || str.length() <= 3) System.out.println("Nope");
      else System.out.println(str);

Q) Given:
    String s = "Hello";
    switch (s) {
      case "Hello" ->
          System.out.print("Bonjour "); // line n1
          System.out.print("Guten Tag ");
      default -> System.out.print("Bye");
    }

Which is true?
A) The code prints: Bonjour Guten Tag Bye
B) The code prints: Bonjour Guten Tag
C) If line n1 is removed the code prints: Guten Tag Bye
D) If line n1 is removed the code prints: Guten Tag
E) The code fails to compile

Q)
    int x = 1;
    // line n1
    switch(x) {
      case 1: LocalDate.of(2023, x, 1);
      default: LocalDate.of(2022, 12, 1);
    };

Which are true?
A) The code compiles
B) The code throws an exception at runtime
C) The code compiles if line n1 is replaced with
   var d =
D) The code compiles if the word "yield" is inserted
   after the colon in both the case and default
E) The code compiles if the changes of both C and D
   are applied

Q) Given
  void doStuff() throws IOException {};
  void doStuff2() throws FileNotFoundException {};
And:
  void tryStuff() {
    try {
      doStuff();
      doStuff2();
    } enter code here {
      // handle both exceptions
    }
  }
What can be inserted at "enter code here"
to provide handling of exceptions from both
methods?
A) catch (IOException | FileNotFoundException e)
B) catch (FileNotFoundException | IOException e)
C) catch (FileNotFoundException e)
D) catch (IOException e)
E) finally

Q) Given
  void doStuff() throws SQLException {};
  void doStuff2() throws FileNotFoundException {};
And:
  void tryStuff() /*...insert here...*/ {
    try {
      doStuff();
      doStuff2();
    } catch (SQLException | FileNotFoundException e) {
      throw e;
    }
  }

What is best at "...insert here..."?
A) throws Exception
B) throws SQLException
C) throws FileNotFoundException
D) throws FileNotFoundException, SQLException
E) nothing is needed, compilation succeeds as is

Q) Given:
class AC implements AutoCloseable {
  private String name;
  public AC(String name) { this.name = name; }
  @Override public void close() {
    System.out.print("Closing " + name);
  }
}
And:
  var ac0 = new AC("zero");
  try (
      var ac1 = new AC("one");
      var ac2 = new AC("two");
      ac0;
  ) {
  }
}
What is the result?
A) Compilation fails
B) Closing zero  Closing two  Closing one
C) Closing zero  Closing one  Closing two
D) Closing two  Closing one  Closing zero
E) Closing one  Closing two  Closing zero

Q) Given
class AC4 implements AutoCloseable {
  @Override
  public void close() throws Exception {
    throw new SQLException();
  }
}
And:
    try (
        var one = new AC4();
        var two = new AC4();
        ){
      throw new FileNotFoundException();
    }

Which are true?
A) Compilation fails
B) A FileNotFoundException is thrown to the caller
C) An SQLException is thrown to the caller
D) close methods of resources "one" and "two" are called
E) close methods of resources "one" and "two" are not both called

Q) Given
public int getValue() {return 1;}
public CharSequence getText() {return null;}

which of these methods may individually be added to a subclass of this class?

A) public int getValue(int x) {return 1;}
B) public String getValue() {return "Hello";}
C) public String getValue(int x) {return "Hello";}
D) public StringBuilder getText() { return null; }
E) public Object getText() { return ""; }

Q) Given:
  void doStuff(int x, long y) {}        // Method B
  void doStuff(long x, int y) {}        // Method C
  void doStuff(int ... x) {}            // Method D
  void doStuff(Integer x, Integer y) {} // Method E

and:
    doStuff(1, 2);

What happens:
A) compilation fails
B) method B is called
C) method C is called
D) method D is called
E) method E is called

Q)Given:
enum Day {
  MONDAY(1), TUESDAY;
  public Day(int d) {}
  public Day() {}
}
and:
sout(Day.MONDAY)

What is the result?
A) 1
B) MONDAY
C) Day.MONDAY
D) Exception at runtime
E) Compilation fails

Q) Given:
public void doStuff() {
  int len = 3;
  Predicate<String> ps = new Predicate<String>() {
    @Override
    public boolean test(String s) {
      return s.length() > len; // line n1
    }
  };
  // line n2
}
  Which are true?
  A) The code compiles
  B) Compilation fails due to a problem at line n1
  C) adding the code
System.out.println("testing lines " + (++len));
  at line n2 is OK

Q) Given:
class Outer1 {
  class Inner1 {
    private int y = 100;
    // line n1
  }
  private int x = 99;
  // line n2
}

and these method proposals:
void showX() { sop("x is " + x); }
void showY() { sop("y is " + y); }
void showAnotherY(Inner1 another) { sop("y is " + another.y); }
static Inner1 makeOne() { return new Inner1(); }

Which is/are true?
A) showX can be added at line n1
B) showY can be added at line n2
C) showAnotherY can be added at line n2
D) makeOne can be added at line n1
E) makeOne can be added at line n2

Q) Given:
record Client(String name, int creditLimit) {
  line n1
}
Which can be added:
A) At line n1
   public Client(String name) {
     this(name, 0);
   }
B) at line n1
   public Client(String name, int creditLimit) {
     super();
     this.name = name;
     this.creditLimit = creditLimit;
   }
C) as a separate declaration:
   record SpecialClient(String name, int creditLimit, String greeting)
     extends Client(name, creditLimit) {}
D) at line n1
   private Client() {
     this("Unknown", 0);
   }
E) at line n1
   Client {}

Q)
interface Int1 {
  default void doStuff() {
    System.out.println("Int1.doStuff()");
  }
}
class Cl1 implements Int1 {
  void doStuff() {
    System.out.println("Cl1.doStuff");
  }
}
What is the result of a call:
new Cl1().doStuff();

A) Compilation fails
B) RuntimeException
C) Int1.doStuff()
D) Cl1.doStuff()
E) Int1.doStuff()
   Cl1.doStuff()

Q) Given:
interface IntX {
  default void doStuff() {
    System.out.println("IntX.doStuff()");
  }
}
interface IntY {
  default void doStuff() {
    System.out.println("IntY.doStuff()");
  }
}
class ClQ implements IntX, IntY {}

What is the result of a call:
new ClQ().doStuff();

A) Compilation fails
B) RuntimeException
C) IntX.doStuff()
D) IntY.doStuff()
E) C1QdoStuff()

Q) Given:
class Parent {
  Parent(int x) { y += x; out.print(", P-c: y is " + y); }
  static { out.print(", P-si: x is " + Parent.x); }
  static int x = 99;
  int y = 100;
  { y++; out.print(", P-i: y is " + y); }
}
class Child extends Parent {
  int x = 200;
  static int y = 300;
  Child() { super(x); }
  Child(int x) { this(); }
  { out.print(", C-i x: is " + x); }
  static { out.print(", C-si: y is " + y); }
}
class InitOrder3 {
  public static void main(String[] args) {
    out.print("Hello!");
    new Child(-1);
    out.println(" Goodbye!");
  }
}
What is the result?
A) Compilation fails
B) Exception at runtime
C) Hello!, P-si: x is 0, C-si: y is 300, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
D) , P-si: x is 0, C-si: y is 300Hello!, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
E) Hello!, P-si: x is 99, C-si: y is 300, P-i: y is 101, P-c: y is 100Goodbye!

Q) Given:
class Parent {
  Parent(int x) { y += x; out.print(", P-c: y is " + y); }
  static { out.print(", P-si: x is " + Parent.x); }
  static int x = 99;
  int y = 100;
  { y++; out.print(", P-i: y is " + y); }
}
class Child extends Parent {
  int x = 200;
  static int y = 300;
  Child() { super(y); }
  Child(int x) { this(); }
  { out.print(", C-i x: is " + x); }
  static { out.print(", C-si: y is " + y); }
}
class InitOrder3 {
  public static void main(String[] args) {
    out.print("Hello!");
    new Child(-1);
    out.println(" Goodbye!");
  }
}

What is the result?
A) Compilation fails
B) Exception at runtime
C) Hello!, C-si: y is 300, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
D) , P-si: x is 0, C-si: y is 300Hello!, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
E) Hello!, P-si: x is 99, C-si: y is 300, P-i: y is 101, P-c: y is 100Goodbye!

Q) Given:
interface StudentCriterion {
  boolean test(Student s);
}

and:
class Student {
  public int getGpa() { return 0; }
  public List<String> getCourses() { return null; }
}

Which are legal (individually):
A) StudentCriterion sc = Student s -> { return s.getGpa() > 3;};
B) StudentCriterion sc = s -> { s.getGpa() > 3 };
C) Object sc = s -> {return s.getGpa() > 3;};
D) StudentCriterion sc = (s) -> s.getGpa() > 3;
E) StudentCriterion sc = s -> s.getCourses().size();

Q)   Which are legal individually:
A) Function<String, String> fss = s -> { System.out.println(s); };
B) Consumer<String> cs = s -> { System.out.println(s); };
C) Supplier<String> ss = (s1, s2) -> s1 + s2;
D) BiPredicate<String> bps = (String s) -> { return s.length() > 0; };
E) ToIntFunction<String> tofs = s -> s.length();

Q) Given:
      ???? (s, t) -> s.length() - t.length();

Which are correct inserted in place of ????
A) BiFunction<String, String, Integer> f =
B) BiPredicate<String> f =
C) Comparator<String> f =
D) Supplier<String, Integer> f =
E) BinaryOperator<String> f =

Q) Given, in a single file X.java:
interface ArbInter {}
final class Y implements X {}
sealed interface X /* point x */{}
// line n1

Which is/are true?
A) the code compiles as it stands
B) the code compiles if the following is added at point x
permits Y, Z
AND this is added at line 1
class Z implements X {}
C) the code compiles if the following is added at point x
permits Y, Z
AND this is added at line 1
record Z(String name) implements X {}
D) the code compiles if the following is added at point x
   permits Y extends ArbInter
E) the code compiles if the following is added at line n1
non-sealed abstract class Z implements X permits Q {}
final class Q extends Z {}


Q) Given, rooted on the base of the classpath:
---file: localization/MyResources.properties
name=Fred
-----------------------------------------------
---file: localization/MyResources_de.properties
name=Helmut
-----------------------------------------------
and:

    Locale.setDefault(Locale.FRENCH);
    ResourceBundle bundle = PropertyResourceBundle.getBundle(
        "MyResources");
    System.out.println("Name is " + bundle.getString("name"));

What is the result?
A) Name is Helmut
B) Name is Fred
C) Name is null
D) an exception is thrown
E) compilation fails

Q)  Given:
  StringBuilder sb1 = new StringBuilder("Hello");
  StringBuilder sb2 = sb1;
  sb1 = null;

Which is true?
A) sb1 is unreferenced and eligible for GC
B) sb1 and sb2 are unreferenced and eligible for GC
C) No objects are eligible for GC

Q) Given:
  StringBuilder sb1 = new StringBuilder("Hello");
  StringBuilder sb2 = new StringBuilder("World");
  sb1 = null;
  sb2 = sb1;

Which is true?
A) Object containing "Hello" is unreferenced and eligible for GC
B) Object containing "World" is unreferenced and eligible for GC
C) No objects are eligible for GC

Q) Given:
static String doStuff(String s) {
  s = new String("Hello");
  return new String(s);
}

and:
  String y = doStuff("Hello");
  // line n1

how many String objects are eligible for GC at line n1
A) 0
B) 1
C) 2
D) 3